{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\greha\\\\OneDrive\\\\Desktop\\\\Capstone\\\\app22-10\\\\frontend\\\\src\\\\components\\\\Chat.js\";\n// Chat.js\nimport React, { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport './Chat.css';\nconst Chat = ({\n  userId,\n  donorId,\n  donationId,\n  chatHistory,\n  setChatHistory\n}) => {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [error, setError] = useState(\"\"); // State for error messages\n  const socket = io('http://localhost:5000'); // Initialize socket connection here\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      console.log('Socket connected');\n      socket.emit('joinChat', {\n        donorId,\n        doneeId: userId\n      });\n    });\n    socket.on('disconnect', () => {\n      console.log('Socket disconnected');\n    });\n    socket.on('messageReceived', message => {\n      setChatHistory(prev => [...prev, message]); // Update chat history when a new message is received\n    });\n\n    // Cleanup function to remove event listeners\n    return () => {\n      socket.off('messageReceived');\n      socket.disconnect(); // Clean up on unmount\n    };\n  }, [donorId, userId, setChatHistory]); // Ensure the correct dependencies are included\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return; // Prevent sending empty messages\n\n    const messageData = {\n      sender: userId,\n      receiver: donorId,\n      message: newMessage,\n      donationId: donationId\n    };\n    console.log(\"Message Data to Send:\", messageData);\n    try {\n      const response = await axios.post('http://localhost:5000/api/chats', messageData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 201) {\n        socket.emit('sendMessage', messageData); // Emit message through socket only after successful save\n        setNewMessage(''); // Clear the input field after sending\n        setError(''); // Clear any previous errors\n      }\n    } catch (error) {\n      console.error(\"Failed to send message:\", error);\n      setError(\"Failed to send message. Please try again.\"); // Set error message\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Chat with Donor\"), error && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, error), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, chatHistory.length > 0 ? chatHistory.map((msg, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `message-bubble ${msg.sender === userId ? 'sent' : 'received'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"message-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, msg.message))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"No messages yet\")), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: newMessage,\n    onChange: e => setNewMessage(e.target.value),\n    placeholder: \"Type a message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSendMessage,\n    disabled: !newMessage.trim(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Send\"), \" \");\n};\nexport default Chat;","map":{"version":3,"names":["React","useEffect","useState","io","axios","Chat","userId","donorId","donationId","chatHistory","setChatHistory","newMessage","setNewMessage","error","setError","socket","on","console","log","emit","doneeId","message","prev","off","disconnect","handleSendMessage","trim","messageData","sender","receiver","response","post","headers","status","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","length","map","msg","index","key","value","onChange","e","target","placeholder","onClick","disabled"],"sources":["C:/Users/greha/OneDrive/Desktop/Capstone/app22-10/frontend/src/components/Chat.js"],"sourcesContent":["// Chat.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\nimport axios from 'axios';\r\nimport './Chat.css';\r\n\r\nconst Chat = ({ userId, donorId, donationId, chatHistory, setChatHistory }) => {\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [error, setError] = useState(\"\"); // State for error messages\r\n  const socket = io('http://localhost:5000'); // Initialize socket connection here\r\n\r\n  useEffect(() => {\r\n    socket.on('connect', () => {\r\n      console.log('Socket connected');\r\n      socket.emit('joinChat', { donorId, doneeId: userId });\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n      console.log('Socket disconnected');\r\n    });\r\n\r\n    socket.on('messageReceived', (message) => {\r\n      setChatHistory((prev) => [...prev, message]); // Update chat history when a new message is received\r\n    });\r\n\r\n    // Cleanup function to remove event listeners\r\n    return () => {\r\n      socket.off('messageReceived');\r\n      socket.disconnect(); // Clean up on unmount\r\n    };\r\n  }, [donorId, userId, setChatHistory]); // Ensure the correct dependencies are included\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim()) return; // Prevent sending empty messages\r\n\r\n    const messageData = {\r\n      sender: userId,\r\n      receiver: donorId,\r\n      message: newMessage,\r\n      donationId: donationId,\r\n    };\r\n\r\n    console.log(\"Message Data to Send:\", messageData);\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/chats', messageData, {\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n      if (response.status === 201) {\r\n        socket.emit('sendMessage', messageData); // Emit message through socket only after successful save\r\n        setNewMessage(''); // Clear the input field after sending\r\n        setError(''); // Clear any previous errors\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to send message:\", error);\r\n      setError(\"Failed to send message. Please try again.\"); // Set error message\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <h3>Chat with Donor</h3>\r\n      {error && <p className=\"error-message\">{error}</p>} {/* Display error message if exists */}\r\n      <div className=\"chat-messages\">\r\n        {chatHistory.length > 0 ? (\r\n          chatHistory.map((msg, index) => (\r\n            <div\r\n              key={index}\r\n              className={`message-bubble ${msg.sender === userId ? 'sent' : 'received'}`}\r\n            >\r\n              <span className=\"message-content\">{msg.message}</span>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No messages yet</p>\r\n        )}\r\n      </div>\r\n      <textarea\r\n        value={newMessage}\r\n        onChange={(e) => setNewMessage(e.target.value)}\r\n        placeholder=\"Type a message\"\r\n      />\r\n      <button onClick={handleSendMessage} disabled={!newMessage.trim()}>Send</button> {/* Disable button if input is empty */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}