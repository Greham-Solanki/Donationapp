{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\greha\\\\OneDrive\\\\Desktop\\\\Capstone\\\\app22-10\\\\frontend\\\\src\\\\components\\\\ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { apiGet, apiPost } from '../utils/api';\nimport './ChatPage.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatPage = ({\n  currentUserId\n}) => {\n  _s();\n  const {\n    donorId,\n    donationId\n  } = useParams();\n  const [chatGroups, setChatGroups] = useState([]);\n  const [selectedChatGroupId, setSelectedChatGroupId] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Fetch chat groups for the current user\n    const fetchChatGroups = async () => {\n      try {\n        const response = await apiGet(`/api/chats/user/${currentUserId}`);\n        setChatGroups(response); // Ensure response data matches the frontend's expectations\n      } catch (error) {\n        console.error(\"Error fetching chat groups:\", error);\n      }\n    };\n    fetchChatGroups();\n  }, [currentUserId]);\n\n  // Fetch messages for the selected chat group\n  useEffect(() => {\n    const fetchMessages = async () => {\n      if (!selectedChatGroupId) return;\n      try {\n        const response = await apiGet(`/api/chats/messages/${selectedChatGroupId}`);\n        setMessages(response);\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n      }\n    };\n    fetchMessages();\n  }, [selectedChatGroupId]);\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    try {\n      const response = await apiPost('/chat/messages', {\n        chatGroupId: selectedChatGroupId,\n        senderId: currentUserId,\n        content: newMessage\n      });\n      setNewMessage('');\n      setMessages(prevMessages => [...prevMessages, {\n        sender: currentUserId,\n        content: newMessage,\n        _id: response.messageId // Assuming response includes messageId\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), chatGroups.length > 0 ? chatGroups.map(chatGroup => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setSelectedChatGroupId(chatGroup._id),\n        className: selectedChatGroupId === chatGroup._id ? 'chat-item active' : 'chat-item',\n        children: [chatGroup.groupName, \" \"]\n      }, chatGroup._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No chats available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: selectedChatGroupId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n            // Ensure each message has a unique _id\n            className: `message ${msg.sender === currentUserId ? 'own' : ''}`,\n            children: msg.content\n          }, msg._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type a message...\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a chat to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatPage, \"A3BW5KhU+1E2Y+ylGILioxZVzx8=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","apiGet","apiPost","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatPage","currentUserId","_s","donorId","donationId","chatGroups","setChatGroups","selectedChatGroupId","setSelectedChatGroupId","messages","setMessages","newMessage","setNewMessage","navigate","fetchChatGroups","response","error","console","fetchMessages","handleSendMessage","trim","chatGroupId","senderId","content","prevMessages","sender","_id","messageId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","chatGroup","onClick","groupName","msg","type","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/greha/OneDrive/Desktop/Capstone/app22-10/frontend/src/components/ChatPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { apiGet, apiPost } from '../utils/api';\r\nimport './ChatPage.css';\r\n\r\nconst ChatPage = ({ currentUserId }) => {\r\n  const { donorId, donationId } = useParams();\r\n  const [chatGroups, setChatGroups] = useState([]);\r\n  const [selectedChatGroupId, setSelectedChatGroupId] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Fetch chat groups for the current user\r\n    const fetchChatGroups = async () => {\r\n      try {\r\n        const response = await apiGet(`/api/chats/user/${currentUserId}`);\r\n        setChatGroups(response); // Ensure response data matches the frontend's expectations\r\n      } catch (error) {\r\n        console.error(\"Error fetching chat groups:\", error);\r\n      }\r\n    };\r\n\r\n    fetchChatGroups();\r\n  }, [currentUserId]);\r\n\r\n  // Fetch messages for the selected chat group\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      if (!selectedChatGroupId) return;\r\n\r\n      try {\r\n        const response = await apiGet(`/api/chats/messages/${selectedChatGroupId}`);\r\n        setMessages(response);\r\n      } catch (error) {\r\n        console.error(\"Error fetching messages:\", error);\r\n      }\r\n    };\r\n\r\n    fetchMessages();\r\n  }, [selectedChatGroupId]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim()) return;\r\n\r\n    try {\r\n      const response = await apiPost('/chat/messages', {\r\n        chatGroupId: selectedChatGroupId,\r\n        senderId: currentUserId,\r\n        content: newMessage,\r\n      });\r\n      setNewMessage('');\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages,\r\n        {\r\n          sender: currentUserId, \r\n          content: newMessage, \r\n          _id: response.messageId, // Assuming response includes messageId\r\n        },\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <div className=\"chat-list\">\r\n        <h2>Chats</h2>\r\n        {chatGroups.length > 0 ? (\r\n          chatGroups.map((chatGroup) => (\r\n            <div\r\n              key={chatGroup._id}\r\n              onClick={() => setSelectedChatGroupId(chatGroup._id)}\r\n              className={selectedChatGroupId === chatGroup._id ? 'chat-item active' : 'chat-item'}\r\n            >\r\n              {chatGroup.groupName} {/* Assuming groupName exists */}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No chats available.</p>\r\n        )}\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {selectedChatGroupId ? (\r\n          <>\r\n            <div className=\"messages\">\r\n              {messages.map((msg) => (\r\n                <div\r\n                  key={msg._id} // Ensure each message has a unique _id\r\n                  className={`message ${msg.sender === currentUserId ? 'own' : ''}`}\r\n                >\r\n                  {msg.content}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"message-input\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type a message...\"\r\n                value={newMessage}\r\n                onChange={(e) => setNewMessage(e.target.value)}\r\n              />\r\n              <button onClick={handleSendMessage}>Send</button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <p>Select a chat to start messaging</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}