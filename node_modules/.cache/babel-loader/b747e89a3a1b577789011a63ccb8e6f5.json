{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\greha\\\\OneDrive\\\\Desktop\\\\Capstone\\\\app22-10\\\\frontend\\\\src\\\\components\\\\ChatPage.js\";\n// src/components/ChatPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport Chat from './Chat'; // Import your Chat component\nimport './Chat.css';\nconst ChatPage = ({\n  currentUserId,\n  notifications,\n  setNotifications\n}) => {\n  const {\n    donorId,\n    donationId\n  } = useParams(); // Get donorId and donationId from URL\n  const [chatHistory, setChatHistory] = useState([]); // Initialize as an empty array\n  const [error, setError] = useState(null);\n  const [isChatInitiated, setIsChatInitiated] = useState(false);\n  useEffect(() => {\n    const checkIfChatExists = async () => {\n      try {\n        // Check if a chat exists for this donation between the current user (donee) and the donor\n        const response = await axios.get(`/api/chats/existence/${currentUserId}/${donorId}/${donationId}`);\n        setIsChatInitiated(response.data.exists);\n\n        // Fetch chat history only if chat exists\n        if (response.data.exists) {\n          const historyResponse = await axios.get(`/api/chats/${currentUserId}/${donorId}/${donationId}`);\n          setChatHistory(historyResponse.data || []);\n        } else {\n          setChatHistory([]); // Set chat history to empty array if no chat exists\n        }\n      } catch (err) {\n        setError(\"Error fetching chat history\");\n        console.error(\"Chat history fetch error:\", err);\n      }\n    };\n    checkIfChatExists();\n  }, [currentUserId, donorId, donationId]); // Added all necessary dependencies\n\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, error);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Chat with Donor\"), isChatInitiated ? /*#__PURE__*/React.createElement(Chat, {\n    userId: currentUserId,\n    donorId: donorId,\n    donationId: donationId // Pass donationId to Chat component\n    ,\n    chatHistory: chatHistory,\n    setChatHistory: setChatHistory,\n    notifications: notifications,\n    setNotifications: setNotifications,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"No chat history found. Please initiate chat from the donation details page.\"));\n};\nexport default ChatPage;","map":{"version":3,"names":["React","useEffect","useState","useParams","axios","Chat","ChatPage","currentUserId","notifications","setNotifications","donorId","donationId","chatHistory","setChatHistory","error","setError","isChatInitiated","setIsChatInitiated","checkIfChatExists","response","get","data","exists","historyResponse","err","console","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","userId"],"sources":["C:/Users/greha/OneDrive/Desktop/Capstone/app22-10/frontend/src/components/ChatPage.js"],"sourcesContent":["// src/components/ChatPage.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Chat from './Chat'; // Import your Chat component\r\nimport './Chat.css';\r\n\r\nconst ChatPage = ({ currentUserId, notifications, setNotifications }) => {\r\n  const { donorId, donationId } = useParams(); // Get donorId and donationId from URL\r\n  const [chatHistory, setChatHistory] = useState([]); // Initialize as an empty array\r\n  const [error, setError] = useState(null);\r\n  const [isChatInitiated, setIsChatInitiated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkIfChatExists = async () => {\r\n      try {\r\n        // Check if a chat exists for this donation between the current user (donee) and the donor\r\n        const response = await axios.get(`/api/chats/existence/${currentUserId}/${donorId}/${donationId}`);\r\n        setIsChatInitiated(response.data.exists);\r\n\r\n        // Fetch chat history only if chat exists\r\n        if (response.data.exists) {\r\n          const historyResponse = await axios.get(`/api/chats/${currentUserId}/${donorId}/${donationId}`);\r\n          setChatHistory(historyResponse.data || []);\r\n        } else {\r\n          setChatHistory([]); // Set chat history to empty array if no chat exists\r\n        }\r\n      } catch (err) {\r\n        setError(\"Error fetching chat history\");\r\n        console.error(\"Chat history fetch error:\", err);\r\n      }\r\n    };\r\n\r\n    checkIfChatExists();\r\n  }, [currentUserId, donorId, donationId]); // Added all necessary dependencies\r\n\r\n  if (error) return <p>{error}</p>;\r\n\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <h2>Chat with Donor</h2>\r\n      {isChatInitiated ? (\r\n        <Chat \r\n          userId={currentUserId} \r\n          donorId={donorId} \r\n          donationId={donationId} // Pass donationId to Chat component\r\n          chatHistory={chatHistory} \r\n          setChatHistory={setChatHistory} \r\n          notifications={notifications} \r\n          setNotifications={setNotifications} \r\n        />\r\n      ) : (\r\n        <p>No chat history found. Please initiate chat from the donation details page.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}