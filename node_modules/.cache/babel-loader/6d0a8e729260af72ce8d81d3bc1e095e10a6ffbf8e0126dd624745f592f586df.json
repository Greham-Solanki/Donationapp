{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\greha\\\\OneDrive\\\\Desktop\\\\Capstone\\\\app22-10\\\\frontend\\\\src\\\\components\\\\Notifications.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { apiGet } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notifications = ({\n  userId,\n  notifications\n}) => {\n  _s();\n  const [initialNotifications, setInitialNotifications] = useState([]);\n  const [allNotifications, setAllNotifications] = useState([]);\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const response = await apiGet(`/api/notifications/user/${userId}`);\n        const fetchedNotifications = response.data || []; // Ensure we have an array\n        console.log('Fetched notifications:', fetchedNotifications);\n        setInitialNotifications(fetchedNotifications);\n        setAllNotifications(fetchedNotifications); // Initially load all notifications\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n    if (userId) fetchNotifications();\n  }, [userId]);\n  useEffect(() => {\n    if (notifications && notifications.length > 0) {\n      // Check for undefined or empty array\n      // Update the list of notifications when a new notification is received\n      setAllNotifications(prevNotifications => [...prevNotifications, ...notifications]);\n    }\n  }, [notifications]); // Listen for prop changes for real-time updates\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: allNotifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No notifications yet!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this) : allNotifications.map((note, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: `New message from ${note.sender}: ${note.content || note.message}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Notifications, \"xYTQ10mMcpJBbM4REBtTHXlThuI=\");\n_c = Notifications;\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","useEffect","useState","apiGet","jsxDEV","_jsxDEV","Notifications","userId","notifications","_s","initialNotifications","setInitialNotifications","allNotifications","setAllNotifications","fetchNotifications","response","fetchedNotifications","data","console","log","error","length","prevNotifications","children","fileName","_jsxFileName","lineNumber","columnNumber","map","note","index","sender","content","message","_c","$RefreshReg$"],"sources":["C:/Users/greha/OneDrive/Desktop/Capstone/app22-10/frontend/src/components/Notifications.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { apiGet } from '../utils/api';\r\n\r\nconst Notifications = ({ userId, notifications }) => {\r\n  const [initialNotifications, setInitialNotifications] = useState([]);\r\n  const [allNotifications, setAllNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchNotifications = async () => {\r\n      try {\r\n        const response = await apiGet(`/api/notifications/user/${userId}`);\r\n        const fetchedNotifications = response.data || [];  // Ensure we have an array\r\n        console.log('Fetched notifications:', fetchedNotifications);\r\n        setInitialNotifications(fetchedNotifications);\r\n        setAllNotifications(fetchedNotifications); // Initially load all notifications\r\n      } catch (error) {\r\n        console.error(\"Error fetching notifications:\", error);\r\n      }\r\n    };\r\n\r\n    if (userId) fetchNotifications();\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (notifications && notifications.length > 0) { // Check for undefined or empty array\r\n      // Update the list of notifications when a new notification is received\r\n      setAllNotifications((prevNotifications) => [\r\n        ...prevNotifications,\r\n        ...notifications\r\n      ]);\r\n    }\r\n  }, [notifications]); // Listen for prop changes for real-time updates\r\n\r\n  return (\r\n    <div>\r\n      <h3>Notifications</h3>\r\n      <ul>\r\n        {allNotifications.length === 0 ? (\r\n          <p>No notifications yet!</p>\r\n        ) : (\r\n          allNotifications.map((note, index) => (\r\n            <li key={index}>{`New message from ${note.sender}: ${note.content || note.message}`}</li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd,MAAMa,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMZ,MAAM,CAAC,2BAA2BI,MAAM,EAAE,CAAC;QAClE,MAAMS,oBAAoB,GAAGD,QAAQ,CAACE,IAAI,IAAI,EAAE,CAAC,CAAE;QACnDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,oBAAoB,CAAC;QAC3DL,uBAAuB,CAACK,oBAAoB,CAAC;QAC7CH,mBAAmB,CAACG,oBAAoB,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAED,IAAIb,MAAM,EAAEO,kBAAkB,CAAC,CAAC;EAClC,CAAC,EAAE,CAACP,MAAM,CAAC,CAAC;EAEZN,SAAS,CAAC,MAAM;IACd,IAAIO,aAAa,IAAIA,aAAa,CAACa,MAAM,GAAG,CAAC,EAAE;MAAE;MAC/C;MACAR,mBAAmB,CAAES,iBAAiB,IAAK,CACzC,GAAGA,iBAAiB,EACpB,GAAGd,aAAa,CACjB,CAAC;IACJ;EACF,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC,CAAC,CAAC;;EAErB,oBACEH,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBtB,OAAA;MAAAkB,QAAA,EACGX,gBAAgB,CAACS,MAAM,KAAK,CAAC,gBAC5BhB,OAAA;QAAAkB,QAAA,EAAG;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,GAE5Bf,gBAAgB,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC/BzB,OAAA;QAAAkB,QAAA,EAAiB,oBAAoBM,IAAI,CAACE,MAAM,KAAKF,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,OAAO;MAAE,GAA1EH,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA0E,CACzF;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAClB,EAAA,CA5CIH,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AA8CnB,eAAeA,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}